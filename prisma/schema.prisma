generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id           String       @id @default(uuid())
  name         String
  userId       String
  emailAddress String?
  phoneNumber  String?
  Address      String?
  categories   Category[]   @relation("StoreToCategory")
  billboards   Billboard[]  @relation("StoreToBillboard")
  sizes        Size[]       @relation("StoreToSize")
  colors       Color[]      @relation("StoreToColor")
  products     Product[]    @relation("StoreToProduct")
  filters      Filter[]     @relation("StoreToFilter")
  filterItems  FilterItem[] @relation("StoreToFilterItem")
  orders       Order[]      @relation("StoreToOrder")
  images       Image[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Billboard {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageURL  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  category  Category[]

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([billboardId])
  @@index([storeId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([storeId])
}

model FilterItem {
  id        String                @id @default(uuid())
  name      String
  value     String
  filterId  String
  filter    Filter                @relation("FilterToFilterItem", fields: [filterId], references: [id])
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  products  ProductOnFilterItem[]
  storeId   String
  store     Store                 @relation("StoreToFilterItem", fields: [storeId], references: [id])

  @@index([filterId])
  @@index([storeId])
}

model Filter {
  id          String       @id @default(uuid())
  storeId     String
  store       Store        @relation("StoreToFilter", fields: [storeId], references: [id])
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  filterItems FilterItem[] @relation("FilterToFilterItem")

  @@index([storeId])
}

model Product {
  id          String                @id @default(uuid())
  storeId     String
  store       Store                 @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category              @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean               @default(false)
  isArchived  Boolean               @default(false)
  sizeId      String
  size        Size                  @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color                 @relation(fields: [colorId], references: [id])
  filterItems ProductOnFilterItem[]
  images      Image[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  orderItems  OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model ProductOnFilterItem {
  product      Product    @relation(fields: [productId], references: [id])
  productId    String // relation scalar field (used in the `@relation` attribute above)
  filterItem   FilterItem @relation(fields: [filterItemId], references: [id])
  filterItemId String // relation scalar field (used in the `@relation` attribute above)
  assignedAt   DateTime   @default(now())

  @@id([productId, filterItemId])
  @@index([productId])
  @@index([filterItemId])
}

model Image {
  id        String   @id @default(uuid())
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String?
  store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([storeId])
}

model Order {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String
  phoneNumber   String
  emailAddress  String
  userId        String
  transactionId String
  storeId       String
  store         Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems    OrderItem[]
  isPaid        Boolean     @default(false)
  phone         String      @default("")
  address       String      @default("")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([orderId])
}
